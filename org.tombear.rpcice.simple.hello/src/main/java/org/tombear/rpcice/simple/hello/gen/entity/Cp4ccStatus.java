// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Hello.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.tombear.rpcice.simple.hello.gen.entity;

public enum Cp4ccStatus implements java.io.Serializable
{
    Cp4ccUnknown(0),
    Cp4ccInitial(1),
    Cp4ccReceive(2),
    Cp4ccDecode(3),
    Cp4ccRecog(4),
    Cp4ccProcess(5),
    Cp4ccReady(6),
    Cp4ccRelease(7),
    Cp4ccCancel(8),
    Cp4ccMaxStatus(9);

    public int value()
    {
        return _value;
    }

    public static Cp4ccStatus valueOf(int v)
    {
        switch(v)
        {
        case 0:
            return Cp4ccUnknown;
        case 1:
            return Cp4ccInitial;
        case 2:
            return Cp4ccReceive;
        case 3:
            return Cp4ccDecode;
        case 4:
            return Cp4ccRecog;
        case 5:
            return Cp4ccProcess;
        case 6:
            return Cp4ccReady;
        case 7:
            return Cp4ccRelease;
        case 8:
            return Cp4ccCancel;
        case 9:
            return Cp4ccMaxStatus;
        }
        return null;
    }

    private Cp4ccStatus(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 9);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, Cp4ccStatus v)
    {
        if(v == null)
        {
            ostr.writeEnum(org.tombear.rpcice.simple.hello.gen.entity.Cp4ccStatus.Cp4ccUnknown.value(), 9);
        }
        else
        {
            ostr.writeEnum(v.value(), 9);
        }
    }

    public static Cp4ccStatus ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(9);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Cp4ccStatus> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Cp4ccStatus v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<Cp4ccStatus> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static Cp4ccStatus validate(int v)
    {
        final Cp4ccStatus e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
